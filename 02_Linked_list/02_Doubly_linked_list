#include<bits/stdc++.h>
#include <iostream>
#include <stdio.h>
using namespace std;

struct node{
    node *prev;
    int item;
    node *next;
};

class DLL{
    private:
    node *start;

    public:
    DLL();
    void insertatstart(int);
    void insertatlast(int);
    node* search(int);
    void insertafter(node *,int);
    void deletefirst();
    void deletelast();
    void deletespecific(node *);
    ~DLL();
};

DLL::DLL(){
    start=NULL;
}
void DLL::insertatstart(int data){
    node *n = new node;
    n->item = data;
    n->prev = NULL;
    n->next = start;
    if(start){
    start->prev = n;
    }
    start = n;
}

void DLL::insertatlast(int data){
    node *t;
    node *n = new node;
    n->item = data;
    n->next=NULL:
    if(start==NULL)
    {
        n->prev=NULL;
        start=n;
    }
    else
    {
        t=start;
        while(t->next!=NULL)
        {
            t=t->next;
        }
        n->prev=t;
        t->next=n;
    }
}

node* DLL::search(int data){
    node *t;
    t=start;
    while(t!=NULL){
        if(t->item==data){
            return t;
        }
        t=t->next;
    }
    return NULL;
}

void DLL::insertafter(node *ptr,int data){
    if(ptr)
    {
    node *n = new node;
    n->item = data;
    n->prev = ptr;
    n->next=ptr->next;
    if(ptr->next)
    {
    ptr->next->prev = n;
    }
    ptr->next = n;
    }
}

void DLL::deletefirst(){
    node *t;
    if(start)
    {
        t = start;
        start = start->next;
        if(t->next)
        {
        start->prev = NULL;
        }
        delete t;
    }
}

void DLL::deletelast(){
    if(start){
        node *t;
        t=start;
        while(t->next!=NULL){
            t=t->next;
        }
        if(t->prev){
            t->prev->next = NULL;
        }
        else{
            start = NULL;
        }
        delete t;
    }
}

void DLL::deletespecific(node *ptr){
    if(ptr->prev)
    {
        ptr->prev->next = ptr->next;
    }
    else
    {
        start = ptr->next;
    }
    if(ptr->next)
    {
        ptr->next->prev = ptr->prev;
    }
    delete ptr;
}

DLL::~DLL(){
    while(start)
    {
        deletefirst();
    }
}
